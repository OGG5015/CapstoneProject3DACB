
/*Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
        RaycastHit hit;

        if (Physics.Raycast(ray, out hit, Mathf.Infinity))
        {
            HexGrid hexGrid = hit.collider.GetComponentInParent<HexGrid>();
            Debug.Log("HexGrid: " + hexGrid);

            if (hexGrid != null)
            {
                //Vector2 hexCenter = HexMetrics.CoordinateToAxial(hit.point.x, hit.point.z, hexGrid.HexSize, hexGrid.Orientation);
                //Vector3 center = HexMetrics.Center(hexGrid.HexSize, (int)hexCenter.x, (int)hexCenter.y, hexGrid.Orientation);

                Vector3 hexCenterAxial = HexMetrics.CoordinateToAxial(hit.point.x, hit.point.z, hexGrid.HexSize, hexGrid.Orientation);
                //Vector2 hexCenter = HexMetrics.CoordinateToAxial(hit.point.x, hit.point.z, hexGrid.HexSize, hexGrid.Orientation);
                Vector3 center = HexMetrics.Center(hexGrid.HexSize, (int)hexCenterAxial.x, (int)hexCenterAxial.y, hexGrid.Orientation);

                transform.position = center;

                Debug.Log("Hex Center: " + hexCenterAxial);
                Debug.Log("Snapped to: " + center);
            }
            else
            {
                Debug.Log("Hex grid is null");
            }
        }
    }*/


    /*Vector3[] vertices = new Vector3[4 * (Width + 1)];

        float halfWidth = (Width - 1) * SquareSize / 2f;
        float halfSquareSize = SquareSize / 2f;


        Vector3 benchCenter = unitBench.transform.position/ Width;


        for (int i = 0; i <= Width; i++)
        {
            //float xPos = unitBench.transform.position.x + i * SquareSize - halfWidth + halfSquareSize;
            //float yPos = unitBench.transform.position.y;
            //float zPos = unitBench.transform.position.z;
            float xPos = benchCenter.x - halfWidth + i * SquareSize;
            float yPos = benchCenter.y;
            float zPos = benchCenter.z;

            vertices[i * 4] = new Vector3(xPos, yPos, zPos);
            vertices[i * 4 + 1] = new Vector3(xPos + SquareSize, yPos, zPos);
            vertices[i * 4 + 2] = new Vector3(xPos + SquareSize, yPos, zPos + SquareSize);
            vertices[i * 4 + 3] = new Vector3(xPos, yPos, zPos + SquareSize);

        }

        int[] triangles = new int[6 * Width];

        for (int i = 0; i < Width; i++)
        {
            triangles[i * 6] = i * 4;
            triangles[i * 6 + 1] = i * 4 + 1;
            triangles[i * 6 + 2] = i * 4 + 2;
            triangles[i * 6 + 3] = i * 4;
            triangles[i * 6 + 4] = i * 4 + 2;
            triangles[i * 6 + 5] = i * 4 + 3;
        }

        Mesh UBmesh = new Mesh();
        UBmesh.name = "Unit Bench Mesh";
        UBmesh.vertices = vertices;
        UBmesh.triangles = triangles;
        UBmesh.RecalculateNormals();
        UBmesh.RecalculateBounds();
        UBmesh.Optimize();
        UBmesh.RecalculateUVDistributionMetrics();

        GetComponent<MeshFilter>().sharedMesh = UBmesh;
        GetComponent<MeshCollider>().sharedMesh = UBmesh;

        int gridLayerIndex = GetLayerIndex(layerMask);
        Debug.Log("Layer Index: " + gridLayerIndex);

        gameObject.layer = gridLayerIndex;*/

        /*for (int x = 0; x < Width; x++)
        {
            triangles[0] = 0;
            triangles[1] = Width + 1;
            triangles[2] = 1;
            triangles[3] = 1;
            triangles[4] = Width + 1;
            triangles[5] = Width + 2;

        }*/

        /*for (int ti = 0, vi = 0, x = 0; x < Width; x++, ti += 6, vi++) {
			triangles[ti] = vi;
			triangles[ti + 3] = triangles[ti + 2] = vi + 1;
			triangles[ti + 4] = triangles[ti + 1] = vi + Width + 1;
			triangles[ti + 5] = vi + Width + 2;
			
		}*/

        /*for (int ti = 0, vi = 0, x = 0; x < Width; x++, ti += 6, vi++)
        {
            triangles[ti] = vi;
            triangles[ti + 3] = triangles[ti + 2] = vi + 1;
            triangles[ti + 4] = triangles[ti + 1] = vi + Width + 1;
            triangles[ti + 5] = vi + Width + 2;
        }*/

        /*Vector3 centerPosition = HexMetrics.Center(HexSize, x, z, Orientation) + transform.position;
                GameObject hex = Instantiate(HexPrefabT1, centerPosition, Quaternion.identity);
                hex.transform.SetParent(transform);

                hex.transform.localScale = Vector3.one * (HexSize/2f);

                //AdjustHexSize(hex);

                HexCell hexCell = hex.GetComponent<HexCell>();
                hexCell.SetupCell(x, z);
                //hexCell.SetupCell(x, z, Orientation, HexSize);*/